# Autogenerated wrapper script for CUDA_jll for x86_64-w64-mingw32
export libcufft, libcusolver, libcufftw, libcublas, nvprof, ptxas, libcurand, libcusparse, libnvrtc, libcudart

## Global variables
PATH = ""
LIBPATH = ""
LIBPATH_env = "PATH"

# Relative path to `libcufft`
const libcufft_splitpath = ["bin", "cufft64_10.dll"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libcufft_path = ""

# libcufft-specific global declaration
# This will be filled out by __init__()
libcufft_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libcufft = "cufft64_10.dll"


# Relative path to `libcusolver`
const libcusolver_splitpath = ["bin", "cusolver64_10.dll"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libcusolver_path = ""

# libcusolver-specific global declaration
# This will be filled out by __init__()
libcusolver_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libcusolver = "cusolver64_10.dll"


# Relative path to `libcufftw`
const libcufftw_splitpath = ["bin", "cufftw64_10.dll"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libcufftw_path = ""

# libcufftw-specific global declaration
# This will be filled out by __init__()
libcufftw_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libcufftw = "cufftw64_10.dll"


# Relative path to `libcublas`
const libcublas_splitpath = ["bin", "cublas64_10.dll"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libcublas_path = ""

# libcublas-specific global declaration
# This will be filled out by __init__()
libcublas_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libcublas = "cublas64_10.dll"


# Relative path to `nvprof`
const nvprof_splitpath = ["bin", "nvprof.exe"]

# This will be filled out by __init__() for all products, as it must be done at runtime
nvprof_path = ""

# nvprof-specific global declaration
function nvprof(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(ENV["PATH"], ';', PATH)
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        if !isempty(get(ENV, LIBPATH_env, ""))
            env_mapping[LIBPATH_env] = string(ENV[LIBPATH_env], ';', LIBPATH)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(nvprof_path)
    end
end


# Relative path to `ptxas`
const ptxas_splitpath = ["bin", "ptxas.exe"]

# This will be filled out by __init__() for all products, as it must be done at runtime
ptxas_path = ""

# ptxas-specific global declaration
function ptxas(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(ENV["PATH"], ';', PATH)
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        if !isempty(get(ENV, LIBPATH_env, ""))
            env_mapping[LIBPATH_env] = string(ENV[LIBPATH_env], ';', LIBPATH)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(ptxas_path)
    end
end


# Relative path to `libcurand`
const libcurand_splitpath = ["bin", "curand64_10.dll"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libcurand_path = ""

# libcurand-specific global declaration
# This will be filled out by __init__()
libcurand_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libcurand = "curand64_10.dll"


# Relative path to `libcusparse`
const libcusparse_splitpath = ["bin", "cusparse64_10.dll"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libcusparse_path = ""

# libcusparse-specific global declaration
# This will be filled out by __init__()
libcusparse_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libcusparse = "cusparse64_10.dll"


# Relative path to `libnvrtc`
const libnvrtc_splitpath = ["bin", "nvrtc64_101_0.dll"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libnvrtc_path = ""

# libnvrtc-specific global declaration
# This will be filled out by __init__()
libnvrtc_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libnvrtc = "nvrtc64_101_0.dll"


# Relative path to `libcudart`
const libcudart_splitpath = ["bin", "cudart64_101.dll"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libcudart_path = ""

# libcudart-specific global declaration
# This will be filled out by __init__()
libcudart_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libcudart = "cudart64_101.dll"


"""
Open all libraries
"""
function __init__()
    global prefix = abspath(joinpath(@__DIR__, ".."))

    # Initialize PATH and LIBPATH environment variable listings
    global PATH_list, LIBPATH_list
    global libcufft_path = abspath(joinpath(artifact"CUDA", libcufft_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libcufft_handle = dlopen(libcufft_path)
    push!(LIBPATH_list, dirname(libcufft_path))

    global libcusolver_path = abspath(joinpath(artifact"CUDA", libcusolver_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libcusolver_handle = dlopen(libcusolver_path)
    push!(LIBPATH_list, dirname(libcusolver_path))

    global libcufftw_path = abspath(joinpath(artifact"CUDA", libcufftw_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libcufftw_handle = dlopen(libcufftw_path)
    push!(LIBPATH_list, dirname(libcufftw_path))

    global libcublas_path = abspath(joinpath(artifact"CUDA", libcublas_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libcublas_handle = dlopen(libcublas_path)
    push!(LIBPATH_list, dirname(libcublas_path))

    global nvprof_path = abspath(joinpath(artifact"CUDA", nvprof_splitpath...))

    push!(PATH_list, dirname(nvprof_path))
    global ptxas_path = abspath(joinpath(artifact"CUDA", ptxas_splitpath...))

    push!(PATH_list, dirname(ptxas_path))
    global libcurand_path = abspath(joinpath(artifact"CUDA", libcurand_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libcurand_handle = dlopen(libcurand_path)
    push!(LIBPATH_list, dirname(libcurand_path))

    global libcusparse_path = abspath(joinpath(artifact"CUDA", libcusparse_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libcusparse_handle = dlopen(libcusparse_path)
    push!(LIBPATH_list, dirname(libcusparse_path))

    global libnvrtc_path = abspath(joinpath(artifact"CUDA", libnvrtc_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libnvrtc_handle = dlopen(libnvrtc_path)
    push!(LIBPATH_list, dirname(libnvrtc_path))

    global libcudart_path = abspath(joinpath(artifact"CUDA", libcudart_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libcudart_handle = dlopen(libcudart_path)
    push!(LIBPATH_list, dirname(libcudart_path))

    # Filter out duplicate and empty entries in our PATH and LIBPATH entries
    filter!(!isempty, unique!(PATH_list))
    filter!(!isempty, unique!(LIBPATH_list))
    global PATH = join(PATH_list, ';')
    global LIBPATH = join(LIBPATH_list, ';')

    # Add each element of LIBPATH to our DL_LOAD_PATH (necessary on platforms
    # that don't honor our "already opened" trick)
    #for lp in LIBPATH_list
    #    push!(DL_LOAD_PATH, lp)
    #end
end  # __init__()

